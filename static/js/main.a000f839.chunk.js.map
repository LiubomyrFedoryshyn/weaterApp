{"version":3,"sources":["components/Title.js","components/Form.js","components/Data.js","App.js","serviceWorker.js","index.js"],"names":["Title","react_default","a","createElement","className","Form","props","onSubmit","getWeather","type","name","placeholder","Data","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","status","json","_this","setState","main","temp","sys","weather","stop","components_Title","components_Form","this","components_Data","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a000f839.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Title = () => {\r\n\r\n    return (\r\n        \r\n        <div className=\"title\">\r\n            <h1>Weather App</h1>\r\n            <p>Find out the weather in your city!</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Title;","import React from 'react';\r\n\r\nconst Form = (props) => {\r\n    return (\r\n        <form className=\"form\" onSubmit={props.getWeather}>\r\n            <input type=\"text\" name=\"city\" placeholder=\"City...\"/>\r\n            <input type=\"text\" name=\"country\" placeholder=\"Country...\"/>\r\n            <button>Get Weather</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form","import React from 'react';\r\n\r\nconst Data = (props) => {\r\n    return (\r\n        <div className=\"data\">\r\n            {props.city && props.country && <p><span>City:</span> {props.city} <span>Country:</span> {props.country}</p>}\r\n            {props.temperature &&<p><span>Temperature: </span>{props.temperature}</p>}\r\n            {props.humidity &&<p><span>Humidity:</span> {props.humidity}</p>}\r\n            {props.description &&<p><span>Conditions: </span>{props.description}</p>}\r\n            {props.error &&<p>{props.error}</p>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Data","import React, { Component } from 'react';\nimport Title from './components/Title';\nimport './App.css';\nimport Form from \"./components/Form\";\nimport Data from \"./components/Data\"\n\nconst API_KEY = \"f872d9f7e644e9c595688c0070ec10fa\";\n\nclass App extends Component {\n  \n\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  }\n\n\n    getWeather = async (e) => {\n      e.preventDefault();\n      const city = e.target.elements.city.value;\n      const country = e.target.elements.country.value;\n      const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\n      if (api_call.status >= 200 && api_call.status < 400) { \n      const data = await api_call.json();\n        this.setState({\n          temperature: data.main.temp,\n          city: data.name,\n          country: data.sys.country,\n          humidity: data.main.humidity,\n          description: data.weather[0].description,\n          error: ''\n        })\n    }  else {\n        this.setState({\n          temperature: undefined,\n          city: undefined,\n          country: undefined,\n          humidity: undefined,\n          description: undefined,\n          error: 'Pleae, feel the info correctly'\n      })\n  }\n}\n    render() {\n    \n        return (\n          <div className=\"App\">\n            <Title />\n            <Form getWeather={this.getWeather}/>\n            <Data temperature={this.state.temperature}\n                  city={this.state.city}\n                  country={this.state.country}\n                  humidity={this.state.humidity}\n                  description={this.state.description}\n                  error={this.state.error}/>\n          </div>\n        );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}